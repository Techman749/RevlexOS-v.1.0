--Copyright (C) 2013 Logan Davis (aka: Techman749) 
--RevlexOS, A.I.D.A. OS (AIDA OS) and all of their variations (RevlexOS Server, RevlexOS Basic, 
--A.I.D.A. OS Server, A.I.D.A. OS Basic) are produced by Techman749. Please Ask for permission before attempting to 
--redistibute ANY code related to RevlexOS & A.I.D.A. OS or any of their variations, IN ANY WAY, SHAPE, OR FORM. 
--Copyright (C) 2013 Revlex Systems CEO: Techman749 (www.revlexsystems.webs.com)

--BIOS Configuration:
--Shows System Hardware Stats & Configuration
quietBoot = "false"















os.pullEvent = os.pullEventRaw
local function bio64()
 function getModemSide64()
    
    function noModem()
    print("No Modem Found! Red-Net Disabled.")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    end
    
    function isModemFront()
    if peripheral.getType("front") == "modem" then
    rednet.open("front")
    print("Red-Net Modem on 'Front' Enabled!")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else noModem()
    end
    end
    
    function isModemBottom()
    if peripheral.getType("bottom") == "modem" then
    rednet.open("bottom")
    print("Red-Net Modem on 'Bottom' Enabled!")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemFront()
    end
    end
    
    function isModemBack()
    if peripheral.getType("back") == "modem" then
    rednet.open("back")
    print("Red-Net Modem on 'Back' Enabled!")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBottom()
    end
    end
    
     function isModemLeft()
    if peripheral.getType("left") == "modem" then
    rednet.open("left")
    print("Red-Net Modem on 'Left' Enabled!")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBack()
    end
    end
    
    function isModemRight()
    if peripheral.getType ("right") == "modem" then
    rednet.open("right")
    print("Red-Net Modem on 'Right' Enabled!")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemLeft()
    end
    end
    
    function isModemTop()
    if peripheral.getType("top") == "modem" then
    rednet.open("top")
    print("Red-Net Modem on 'Top' Enabled!")
    term.setBackgroundColor(colors.gray) 
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemRight()
    end
    end
 isModemTop()
end
 function getModemSideQuiet64()
    
    function noModem()
    sleep(0.1)
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    end
    
    function isModemFront()
    if peripheral.getType("front") == "modem" then
    rednet.open("front")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else noModem()
    end
    end
    
    function isModemBottom()
    if peripheral.getType("bottom") == "modem" then
    rednet.open("bottom")
    term.setBackGroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemFront()
    end
    end
    
    function isModemBack()
    if peripheral.getType("back") == "modem" then
    rednet.open("back")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBottom()
    end
    end
    
     function isModemLeft()
    if peripheral.getType("left") == "modem" then
    rednet.open("left")
    term.setBackgroundColor(colors.grey)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBack()
    end
    end
    
    function isModemRight()
    if peripheral.getType ("right") == "modem" then
    rednet.open("right")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemLeft()
    end
    end
    
    function isModemTop()
    if peripheral.getType("top") == "modem" then
    rednet.open("top")
    term.setBackgroundColor(colors.gray)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    term.setBackgroundColor(colors.black)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemRight()
    end
    end
 isModemTop()
end
 function drawLogo64()
--R--
 paintutils.drawPixel(4,4, colors.lime)
 paintutils.drawPixel(4,5, colors.yellow)
 paintutils.drawPixel(4,6, colors.orange)
 paintutils.drawPixel(4,7, colors.red)
 paintutils.drawPixel(4,8, colors.purple)
 paintutils.drawPixel(4,9, colors.lightBlue)
 paintutils.drawPixel(5,4, colors.lime)
 paintutils.drawPixel(5,6, colors.orange)
 paintutils.drawPixel(6,4, colors.lime)
 paintutils.drawPixel(6,6, colors.orange)
 paintutils.drawPixel(7,4, colors.lime)
 paintutils.drawPixel(7,6, colors.orange)
 paintutils.drawPixel(8,5, colors.yellow)
 paintutils.drawPixel(8,7, colors.red)
 paintutils.drawPixel(8,8, colors.purple)
 paintutils.drawPixel(8,9, colors.lightBlue)
 sleep(0.5)
-----
--E--
paintutils.drawPixel(12,4, colors.lime)
paintutils.drawPixel(12,5, colors.yellow)
paintutils.drawPixel(12,6, colors.orange)
paintutils.drawPixel(12,7, colors.red)
paintutils.drawPixel(12,8, colors.purple)
paintutils.drawPixel(12,9, colors.lightBlue)
paintutils.drawPixel(13,4, colors.lime)
paintutils.drawPixel(13,6, colors.orange)
paintutils.drawPixel(13,9, colors.lightBlue)
paintutils.drawPixel(14,4, colors.lime)
paintutils.drawPixel(14,6, colors.orange)
paintutils.drawPixel(14,9, colors.lightBlue)
paintutils.drawPixel(15,4, colors.lime)
paintutils.drawPixel(15,6, colors.orange)
paintutils.drawPixel(15,9, colors.lightBlue)
paintutils.drawPixel(16,4, colors.lime)
paintutils.drawPixel(16,6, colors.orange)
paintutils.drawPixel(16,9, colors.lightBlue)
sleep(0.5)
-----
--V--
paintutils.drawPixel(20,4, colors.lime)
paintutils.drawPixel(20,5, colors.yellow)
paintutils.drawPixel(20,6, colors.orange)
paintutils.drawPixel(24,4, colors.lime)
paintutils.drawPixel(24,5, colors.yellow)
paintutils.drawPixel(24,6, colors.orange)
paintutils.drawPixel(21,7, colors.red)
paintutils.drawPixel(21,8, colors.purple)
paintutils.drawPixel(23,7, colors.red)
paintutils.drawPixel(23,8, colors.purple)
paintutils.drawPixel(22,9, colors.lightBlue)
sleep(0.5)
-----
--L--
paintutils.drawPixel(28,4, colors.lime)
paintutils.drawPixel(28,5, colors.yellow)
paintutils.drawPixel(28,6, colors.orange)
paintutils.drawPixel(28,7, colors.red)
paintutils.drawPixel(28,8, colors.purple)
paintutils.drawPixel(28,9, colors.lightBlue)
paintutils.drawPixel(29,9, colors.lightBlue)
paintutils.drawPixel(30,9, colors.lightBlue)
paintutils.drawPixel(31,9, colors.lightBlue)
paintutils.drawPixel(32,9, colors.lightBlue)
sleep(0.5)
-----
--E--
paintutils.drawPixel(36,4, colors.lime)
paintutils.drawPixel(36,5, colors.yellow)
paintutils.drawPixel(36,6, colors.orange)
paintutils.drawPixel(36,7, colors.red)
paintutils.drawPixel(36,8, colors.purple)
paintutils.drawPixel(36,9, colors.lightBlue)
paintutils.drawPixel(37,4, colors.lime)
paintutils.drawPixel(37,6, colors.orange)
paintutils.drawPixel(37,9, colors.lightBlue)
paintutils.drawPixel(38,4, colors.lime)
paintutils.drawPixel(38,6, colors.orange)
paintutils.drawPixel(38,9, colors.lightBlue)
paintutils.drawPixel(39,4, colors.lime)
paintutils.drawPixel(39,6, colors.orange)
paintutils.drawPixel(39,9, colors.lightBlue)
paintutils.drawPixel(40,4, colors.lime)
paintutils.drawPixel(40,6, colors.orange)
paintutils.drawPixel(40,9, colors.lightBlue)
sleep(0.5)
-----
--X--
paintutils.drawPixel(44,4, colors.lime)
paintutils.drawPixel(44,8, colors.purple)
paintutils.drawPixel(44,9, colors.lightBlue)
paintutils.drawPixel(45,5, colors.yellow)
paintutils.drawPixel(45,7, colors.red)
paintutils.drawPixel(46,6, colors.orange)
paintutils.drawPixel(47,5, colors.yellow)
paintutils.drawPixel(47,7, colors.red)
paintutils.drawPixel(48,4, colors.lime)
paintutils.drawPixel(48,8, colors.purple)
paintutils.drawPixel(48,9, colors.lightBlue)
sleep(0.5)
end
 function detectHardware64()
term.setTextColor(colors.white)
term.setBackgroundColor(colors.gray)
term.setCursorPos(1,13)
print("CPU: ")
term.setCursorPos(1,14)
print("RAM: ")
term.setCursorPos(1,15)
print("GPU: ")
term.setCursorPos(1,16)
print("HDD: ")
term.setCursorPos(1,17)
print("Modem: ")
term.setCursorPos(6,13)
sleep(0.5)
print("Red-Core Duel-Core CPU @ 500 MHz ea. (64-bit)")
sleep(0.5)
term.setCursorPos(6,14)
print("Red-RAM 1.00 GB RAM [2 Units @ 512 MB ea.]")
sleep(0.5)
term.setCursorPos(6,15)
print("Integrated Red-Core GPU w/ 64 MB Dedicated RAM")
sleep(0.5)
term.setCursorPos(6,16)
print("Red-Disk 2 MB HDD [x1] @ 7200 RPM")
sleep(0.5)
term.setCursorPos(8,17)
getModemSide64()
end

--Main Program--
term.clear()
term.setCursorPos(1,1)
term.setBackgroundColor(colors.gray)
term.setTextColor(colors.white)
term.clear()
term.setCursorPos(14,1)
print("Uni-Boot B.I.O.S. v. 2.0")
term.setCursorPos(1,2)
print("---------------------------------------------------")
drawLogo64()
if quietBoot == "true" then
term.setBackgroundColor(colors.gray)
getModemSideQuiet()
else
term.setBackgroundColor(colors.gray)
detectHardware64()
end
end

----------------

local function bio32()
 function getModemSide32() 
    function noModem()
    
    print("No Modem Found! Red-Net Disabled.")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    end
    
    function isModemFront()
    if peripheral.getType("front") == "modem" then
    rednet.open("front")
    print("Red-Net Modem on 'Front' Enabled!")
    
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else noModem()
    end
    end
    
    function isModemBottom()
    if peripheral.getType("bottom") == "modem" then
    rednet.open("bottom")
    print("Red-Net Modem on 'Bottom' Enabled!")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemFront()
    end
    end
    
    function isModemBack()
    if peripheral.getType("back") == "modem" then
    rednet.open("back")
    print("Red-Net Modem on 'Back' Enabled!")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBottom()
    end
    end
    
     function isModemLeft()
    if peripheral.getType("left") == "modem" then
    rednet.open("left")
    print("Red-Net Modem on 'Left' Enabled!")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBack()
    end
    end
    
    function isModemRight()
    if peripheral.getType ("right") == "modem" then
    rednet.open("right")
    print("Red-Net Modem on 'Right' Enabled!")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemLeft()
    end
    end
    
    function isModemTop()
    if peripheral.getType("top") == "modem" then
    rednet.open("top")
    print("Red-Net Modem on 'Top' Enabled!") 
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemRight()
    end
    end
 isModemTop()
end
 function getModemSideQuiet32()
    
    function noModem()
    sleep(0.1)
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    end
    
    function isModemFront()
    if peripheral.getType("front") == "modem" then
    rednet.open("front")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else noModem()
    end
    end
    
    function isModemBottom()
    if peripheral.getType("bottom") == "modem" then
    rednet.open("bottom")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemFront()
    end
    end
    
    function isModemBack()
    if peripheral.getType("back") == "modem" then
    rednet.open("back")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBottom()
    end
    end
    
     function isModemLeft()
    if peripheral.getType("left") == "modem" then
    rednet.open("left")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemBack()
    end
    end
    
    function isModemRight()
    if peripheral.getType ("right") == "modem" then
    rednet.open("right")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemLeft()
    end
    end
    
    function isModemTop()
    if peripheral.getType("top") == "modem" then
    rednet.open("top")
    term.setCursorPos(1,18)
    textutils.slowPrint("Proceeding to Bootloader...")
    sleep(2)
    shell.run("/.SYSTEM/.BOOTLOADER")
    else isModemRight()
    end
    end
 isModemTop()
 
end
 function drawLogo32()
term.setCursorPos(4,4)
print("RRRR    EEEEE   V   V   L       EEEEE   X   X")
term.setCursorPos(4,5)
print("R   R   E       V   V   L       E        X X ")
term.setCursorPos(4,6)
print("RRRR    EEEE    V   V   L       EEEE      X  ")
term.setCursorPos(4,7)
print("R   R   E        V V    L       E        X X ")
term.setCursorPos(4,8)
print("R   R   E        V V    L       E       X   X")
term.setCursorPos(4,9)
print("R   R   E        V V    L       E       X   X")
term.setCursorPos(4,10)
print("R   R   EEEEE     V     LLLLL   EEEEE   X   X")
end
 function detectHardware32()
term.setCursorPos(1,13)
print("CPU: ")
term.setCursorPos(1,14)
print("RAM: ")
term.setCursorPos(1,15)
print("GPU: ")
term.setCursorPos(1,16)
print("HDD: ")
term.setCursorPos(1,17)
print("Modem: ")
term.setCursorPos(6,13)
sleep(0.5)
print("Red-Core Single-Core CPU @ 350 MHz (32-bit)")
sleep(0.5)
term.setCursorPos(6,14)
print("Red-RAM 256MB RAM [2 Units @ 128.0 MB ea.]")
sleep(0.5)
term.setCursorPos(6,15)
print("Integrated Red-Core GPU w/ 16MB Dedicated RAM")
sleep(0.5)
term.setCursorPos(6,16)
print("Red-Disk 2 MB HDD [x1] @ 3600 RPM")
sleep(0.5)
term.setCursorPos(8,17)
getModemSide32()
end
-- Main 32-bit Program --
term.clear()
term.setCursorPos(1,1)
term.clear()
term.setCursorPos(14,1)
print("Uni-Boot B.I.O.S. v. 2.0")
term.setCursorPos(1,2)
print("---------------------------------------------------")
drawLogo32()
if quietBoot == "true" then
getModemSideQuiet32()
else
detectHardware32()
end
end
if not term.isColor() then bio32() else bio64()
end
